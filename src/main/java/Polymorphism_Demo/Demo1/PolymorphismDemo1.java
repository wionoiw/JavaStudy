package Polymorphism_Demo.Demo1;

/**
 * @Author HHH
 * @Date 2025/4/8 10:01
 * @Day Day12
 */
//多态
//  同类型的对象,表现出的不同形态

//多态的表现形式
//  父类对象 对象名称 = 子类对象;

//多态的前提
//  有继承/实现关系

//多态调用成员的特点
//  变量调用:编译看左边,运行也看左边
//  方法调用:编译看左边,运行看右边

//多态的优势
//  在多态形式下,右边对象可以实现解耦合,便于扩展和维护
//      Person p = new Student();
//      p.work();   //业务逻辑发生改变时,后续代码无需修改
//  定义方法时,使用父类型作为参数,可以接受所有子类对象,体现多态的扩展性与便利

//多类的弊端
//  不能调用子类的特有方法
public class PolymorphismDemo1 {
}
