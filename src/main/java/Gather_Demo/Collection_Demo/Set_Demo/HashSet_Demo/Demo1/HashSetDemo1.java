package Gather_Demo.Collection_Demo.Set_Demo.HashSet_Demo.Demo1;

/**
 * @Author HHH
 * @Date 2025/4/23 17:59
 * @Day Day27
 */

//HashSet   集合
//Hash    哈希表,表明HashSet底层数据结构是哈希表
//Set      表明HashSet是Set系列的一员

//HashSet底层初始创建一个默认长度16,默认加载因子0.75的数组,数组名table
    //加载因子用于计算底层数组扩容时机,当数组元素数量大于等于数组长度*加载因子时,进行扩容
    //哈希值相同,属性值不同元素存入数组同一位置,形成链表
    //当链表长度大于8而且数组长度大于等于64时,链表自动转换为红黑树

//如果HashSet中存储的是自定义对象，必须要重写hashcode和equals方法

//哈希表是一种对于增删改查数据性能都较好的结构
//哈希表组成:    //JDK8之前:数组+链表  //JDK8开始:数组+链表+红黑树
//哈希值:对象的整数表现形式
    //哈希值
        //哈希值用于计算元素在底层数组的添加索引   //int index = (数组长度 - 1) & 哈希值;
        //哈希值相同的元素,会调用equals方法比较属性值,相同则不存,不同会添加在底层数组的同一个位置,形成链表
            //JDK8以前:新元素存入数组,老元素挂在新元素下面 //JDK8以后：亲新元素直接挂在老元素下面
        //根据hashCode方法算出来的int类型的整数
        //该方法定义在Object类中,所有对象都可以调用,默认使用地址值进行计算
        //一般情况下,会重写hashCode方法,利用对象内部的属性值计算哈希值
    //对象的哈希值特点
        //如果没有重写hashcode方法,不同对象计算出的哈希值是不同的
        //如果已经重写hashcode方法,不同的对象只要属性值相同,计算出的哈希值就是一样的
        //在小部分情况下,不同的属性值或者不同的地址值计算出来的哈希值也有可能一样(哈希碰撞)
public class HashSetDemo1 {
}
